openapi: 3.0.3
info:
  title: Laravel
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://localhost:8000'
paths:
  /api/auth/login:
    post:
      summary: Login
      operationId: login
      description: 'Authenticate a user and create a new session.'
      parameters: []
      responses: {  }
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: bauch.nestor@example.net
                  nullable: false
                password:
                  type: string
                  description: ''
                  example: 'N:+b/"v*Tv'
                  nullable: false
                remember_me:
                  type: boolean
                  description: ''
                  example: true
                  nullable: false
                2fa_code:
                  type: string
                  description: 'Must be 6 characters.'
                  example: xboyza
                  nullable: false
              required:
                - email
                - password
      security: []
  /api/auth/register:
    post:
      summary: Register
      operationId: register
      description: 'Register a new user account.'
      parameters: []
      responses: {  }
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address. Must not be greater than 255 characters.'
                  example: dante92@example.org
                  nullable: false
                password:
                  type: string
                  description: ''
                  example: '?{rTBcFFG|IXt'
                  nullable: false
              required:
                - email
                - password
      security: []
  /api/auth/logout:
    post:
      summary: Logout
      operationId: logout
      description: 'Invalidate the current session.'
      parameters: []
      responses: {  }
      tags:
        - Authentication
      security: []
  /api/oauth/token:
    post:
      summary: 'Issue Token'
      operationId: issueToken
      description: "Issue an access token using one of the supported grant types:\n- authorization_code\n- client_credentials\n- refresh_token"
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  token_type: Bearer
                  expires_in: 3600
                  access_token: eyJ0eXAiOiJKV1QiLCJhbG...
                  refresh_token: def50200841d3e9ad...
                  scope: 'profile email'
                properties:
                  token_type:
                    type: string
                    example: Bearer
                  expires_in:
                    type: integer
                    example: 3600
                  access_token:
                    type: string
                    example: eyJ0eXAiOiJKV1QiLCJhbG...
                  refresh_token:
                    type: string
                    example: def50200841d3e9ad...
                  scope:
                    type: string
                    example: 'profile email'
        400:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: ''
                    type: object
                    example:
                      error: invalid_request
                      error_description: 'The request is missing a required parameter'
                    properties:
                      error:
                        type: string
                        example: invalid_request
                      error_description:
                        type: string
                        example: 'The request is missing a required parameter'
                  -
                    description: ''
                    type: object
                    example:
                      error: invalid_grant
                      error_description: 'The authorization code is invalid'
                    properties:
                      error:
                        type: string
                        example: invalid_grant
                      error_description:
                        type: string
                        example: 'The authorization code is invalid'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: invalid_client
                  error_description: 'Client authentication failed'
                properties:
                  error:
                    type: string
                    example: invalid_client
                  error_description:
                    type: string
                    example: 'Client authentication failed'
      tags:
        - 'OAuth2 Authentication'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  description: 'The grant type.'
                  example: authorization_code
                  nullable: false
                client_id:
                  type: string
                  description: 'The client ID.'
                  example: test-client
                  nullable: false
                client_secret:
                  type: string
                  description: 'The client secret (raw value, will be hashed internally).'
                  example: test-secret
                  nullable: false
                code:
                  type: string
                  description: 'for authorization_code The authorization code.'
                  example: def50200...
                  nullable: false
                refresh_token:
                  type: string
                  description: 'for refresh_token The refresh token.'
                  example: def50200...
                  nullable: false
                redirect_uri:
                  type: string
                  description: 'for authorization_code The redirect URI.'
                  example: 'https://client.example.com/callback'
                  nullable: false
                scope:
                  type: string
                  description: 'The requested scope.'
                  example: 'profile email'
                  nullable: false
              required:
                - grant_type
                - client_id
                - client_secret
                - code
                - refresh_token
                - redirect_uri
      security: []
  /api/oauth/token/revoke:
    post:
      summary: 'Revoke Token'
      operationId: revokeToken
      description: 'Revoke an access token and its associated refresh token.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Token revoked successfully'
                properties:
                  message:
                    type: string
                    example: 'Token revoked successfully'
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: invalid_request
                  error_description: 'The request is missing a required parameter'
                properties:
                  error:
                    type: string
                    example: invalid_request
                  error_description:
                    type: string
                    example: 'The request is missing a required parameter'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: invalid_client
                  error_description: 'Client authentication failed'
                properties:
                  error:
                    type: string
                    example: invalid_client
                  error_description:
                    type: string
                    example: 'Client authentication failed'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: invalid_token
                  error_description: 'Token not found'
                properties:
                  error:
                    type: string
                    example: invalid_token
                  error_description:
                    type: string
                    example: 'Token not found'
      tags:
        - 'OAuth2 Authentication'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: 'The access token to revoke.'
                  example: eyJ0eXAiOiJKV1QiLCJhbG...
                  nullable: false
                client_id:
                  type: string
                  description: 'The client ID.'
                  example: test-client
                  nullable: false
                client_secret:
                  type: string
                  description: 'The client secret (raw value, will be hashed internally).'
                  example: test-secret
                  nullable: false
              required:
                - token
                - client_id
                - client_secret
      security: []
  /api/oauth/authorize:
    get:
      summary: Authorize
      operationId: authorize
      description: 'First step of Authorization Code flow. Shows authorization form to the user.'
      parameters:
        -
          in: query
          name: client_id
          description: 'The client ID.'
          example: test-client
          required: true
          schema:
            type: string
            description: 'The client ID.'
            example: test-client
            nullable: false
        -
          in: query
          name: redirect_uri
          description: 'The redirect URI.'
          example: 'https://client.example.com/callback'
          required: true
          schema:
            type: string
            description: 'The redirect URI.'
            example: 'https://client.example.com/callback'
            nullable: false
        -
          in: query
          name: response_type
          description: 'Must be "code".'
          example: code
          required: true
          schema:
            type: string
            description: 'Must be "code".'
            example: code
            nullable: false
        -
          in: query
          name: scope
          description: 'The requested scope.'
          example: 'profile email'
          required: false
          schema:
            type: string
            description: 'The requested scope.'
            example: 'profile email'
            nullable: false
        -
          in: query
          name: state
          description: 'A random string to prevent CSRF.'
          example: xyz123
          required: false
          schema:
            type: string
            description: 'A random string to prevent CSRF.'
            example: xyz123
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  client:
                    name: 'Test Client'
                    redirect_uri: 'https://client.example.com/callback'
                  scopes:
                    -
                      name: profile
                      description: 'Access user profile information'
                properties:
                  client:
                    type: object
                    properties:
                      name:
                        type: string
                        example: 'Test Client'
                      redirect_uri:
                        type: string
                        example: 'https://client.example.com/callback'
                  scopes:
                    type: array
                    example:
                      -
                        name: profile
                        description: 'Access user profile information'
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          example: profile
                        description:
                          type: string
                          example: 'Access user profile information'
        400:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: ''
                    type: object
                    example:
                      error: invalid_request
                      error_description: 'The request is missing a required parameter'
                    properties:
                      error:
                        type: string
                        example: invalid_request
                      error_description:
                        type: string
                        example: 'The request is missing a required parameter'
                  -
                    description: ''
                    type: object
                    example:
                      error: invalid_client
                      error_description: 'Client not found or redirect URI mismatch'
                    properties:
                      error:
                        type: string
                        example: invalid_client
                      error_description:
                        type: string
                        example: 'Client not found or redirect URI mismatch'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated
                properties:
                  message:
                    type: string
                    example: Unauthenticated
      tags:
        - 'OAuth2 Authentication'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                client_id:
                  type: string
                  description: ''
                  example: numquam
                  nullable: false
                redirect_uri:
                  type: string
                  description: 'Must be a valid URL.'
                  example: 'http://www.fay.com/'
                  nullable: false
                response_type:
                  type: string
                  description: ''
                  example: code
                  nullable: false
                  enum:
                    - code
                scope:
                  type: string
                  description: ''
                  example: voluptatibus
                  nullable: false
                state:
                  type: string
                  description: ''
                  example: ducimus
                  nullable: false
              required:
                - client_id
                - redirect_uri
                - response_type
      security: []
    post:
      summary: 'Approve Authorization'
      operationId: approveAuthorization
      description: 'Second step of Authorization Code flow. Creates authorization code after user approval.'
      parameters: []
      responses:
        302:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "Redirects to client's redirect_uri with authorization code"
      tags:
        - 'OAuth2 Authentication'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                client_id:
                  type: string
                  description: 'The client ID.'
                  example: test-client
                  nullable: false
                redirect_uri:
                  type: string
                  description: 'The redirect URI.'
                  example: 'https://client.example.com/callback'
                  nullable: false
                scope:
                  type: string
                  description: 'The approved scope.'
                  example: 'profile email'
                  nullable: false
                state:
                  type: string
                  description: 'The state from the authorization request.'
                  example: xyz123
                  nullable: false
              required:
                - client_id
                - redirect_uri
      security: []
  /api/auth/password/forgot:
    post:
      summary: 'Forgot Password'
      operationId: forgotPassword
      description: 'Send a password reset link to the given email.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Password reset link sent'
                properties:
                  message:
                    type: string
                    example: 'Password reset link sent'
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Unable to send reset link'
                properties:
                  message:
                    type: string
                    example: 'Unable to send reset link'
      tags:
        - 'Password Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'The email address.'
                  example: user@example.com
                  nullable: false
              required:
                - email
      security: []
  /api/auth/password/reset:
    post:
      summary: 'Reset Password'
      operationId: resetPassword
      description: 'Reset the password using the reset token.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Password has been reset'
                properties:
                  message:
                    type: string
                    example: 'Password has been reset'
        400:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: ''
                    type: object
                    example:
                      message: 'Password was used before'
                    properties:
                      message:
                        type: string
                        example: 'Password was used before'
                  -
                    description: ''
                    type: object
                    example:
                      message: 'Unable to reset password'
                    properties:
                      message:
                        type: string
                        example: 'Unable to reset password'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'User not found'
                properties:
                  message:
                    type: string
                    example: 'User not found'
      tags:
        - 'Password Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: 'The reset token.'
                  example: '1234567890'
                  nullable: false
                email:
                  type: string
                  description: 'The email address.'
                  example: user@example.com
                  nullable: false
                password:
                  type: string
                  description: 'The new password.'
                  example: NewStrongPass123!
                  nullable: false
                password_confirmation:
                  type: string
                  description: 'The password confirmation.'
                  example: NewStrongPass123!
                  nullable: false
              required:
                - token
                - email
                - password
                - password_confirmation
      security: []
  /api/users/me/sessions:
    get:
      summary: 'List Sessions'
      operationId: listSessions
      description: 'Get all active sessions for the authenticated user.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated
                properties:
                  message:
                    type: string
                    example: Unauthenticated
      tags:
        - 'Session Management'
      security: []
  '/api/users/me/sessions/{id}':
    delete:
      summary: 'Delete Session'
      operationId: deleteSession
      description: 'Terminate a specific session.'
      parameters: []
      responses: {  }
      tags:
        - 'Session Management'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the session.'
        example: soluta
        required: true
        schema:
          type: string
  /api/auth/2fa/enable:
    post:
      summary: 'Enable 2FA'
      operationId: enable2FA
      description: 'Start the 2FA setup process.'
      parameters: []
      responses: {  }
      tags:
        - 'Two Factor Authentication'
      security: []
  /api/auth/2fa/verify:
    post:
      summary: 'Verify 2FA'
      operationId: verify2FA
      description: 'Verify and complete the 2FA setup.'
      parameters: []
      responses: {  }
      tags:
        - 'Two Factor Authentication'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  description: 'Must be 6 characters.'
                  example: kyxpns
                  nullable: false
              required:
                - code
      security: []
  /api/auth/2fa/disable:
    post:
      summary: 'Disable 2FA'
      operationId: disable2FA
      description: 'Disable two-factor authentication for the user.'
      parameters: []
      responses: {  }
      tags:
        - 'Two Factor Authentication'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                current_password:
                  type: string
                  description: ''
                  example: doloremque
                  nullable: false
                code:
                  type: string
                  description: 'Must be 6 characters.'
                  example: iaerhp
                  nullable: false
              required:
                - current_password
                - code
      security: []
  /api/auth/2fa/backup-codes:
    get:
      summary: 'Get Backup Codes'
      operationId: getBackupCodes
      description: 'Get the list of backup codes.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated
                properties:
                  message:
                    type: string
                    example: Unauthenticated
      tags:
        - 'Two Factor Authentication'
      security: []
  /api/auth/2fa/regenerate-backup-codes:
    post:
      summary: 'Regenerate Backup Codes'
      operationId: regenerateBackupCodes
      description: 'Generate new backup codes.'
      parameters: []
      responses: {  }
      tags:
        - 'Two Factor Authentication'
      security: []
  /api/users/me:
    get:
      summary: 'Get Current User'
      operationId: getCurrentUser
      description: "Get the authenticated user's profile information."
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  user:
                    id: 1
                    email: user@example.com
                    last_login_at: '2024-03-20T10:00:00Z'
                    two_factor_enabled: false
                    password_status:
                      expired: false
                      days_left: 45
                      status: valid
                properties:
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      email:
                        type: string
                        example: user@example.com
                      last_login_at:
                        type: string
                        example: '2024-03-20T10:00:00Z'
                      two_factor_enabled:
                        type: boolean
                        example: false
                      password_status:
                        type: object
                        properties:
                          expired:
                            type: boolean
                            example: false
                          days_left:
                            type: integer
                            example: 45
                          status:
                            type: string
                            example: valid
      tags:
        - 'User Management'
    put:
      summary: 'Update Profile'
      operationId: updateProfile
      description: "Update the authenticated user's profile information."
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Profile updated successfully'
                  user:
                    id: 1
                    email: newuser@example.com
                properties:
                  message:
                    type: string
                    example: 'Profile updated successfully'
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      email:
                        type: string
                        example: newuser@example.com
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The given data was invalid.'
                  errors:
                    email:
                      - 'The email has already been taken.'
                properties:
                  message:
                    type: string
                    example: 'The given data was invalid.'
                  errors:
                    type: object
                    properties:
                      email:
                        type: array
                        example:
                          - 'The email has already been taken.'
                        items:
                          type: string
      tags:
        - 'User Management'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'The new email address.'
                  example: newuser@example.com
                  nullable: false
  /api/users/me/password:
    put:
      summary: 'Update Password'
      operationId: updatePassword
      description: "Update the authenticated user's password."
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Password updated successfully'
                properties:
                  message:
                    type: string
                    example: 'Password updated successfully'
        400:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: ''
                    type: object
                    example:
                      message: 'Current password is incorrect'
                    properties:
                      message:
                        type: string
                        example: 'Current password is incorrect'
                  -
                    description: ''
                    type: object
                    example:
                      message: 'Password was used before'
                    properties:
                      message:
                        type: string
                        example: 'Password was used before'
      tags:
        - 'User Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                current_password:
                  type: string
                  description: 'The current password.'
                  example: CurrentPass123!
                  nullable: false
                password:
                  type: string
                  description: 'The new password.'
                  example: NewStrongPass123!
                  nullable: false
                password_confirmation:
                  type: string
                  description: 'The new password confirmation.'
                  example: NewStrongPass123!
                  nullable: false
              required:
                - current_password
                - password
                - password_confirmation
tags:
  -
    name: Authentication
    description: "\nAPIs for managing authentication"
  -
    name: 'OAuth2 Authentication'
    description: "\nAPIs for OAuth2 authentication flows"
  -
    name: 'Password Management'
    description: "\nAPIs for managing passwords"
  -
    name: 'Session Management'
    description: "\nAPIs for managing user sessions"
  -
    name: 'Two Factor Authentication'
    description: "\nAPIs for managing 2FA"
  -
    name: 'User Management'
    description: "\nAPIs for managing user profile"
